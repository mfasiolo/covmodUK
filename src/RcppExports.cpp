// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// d1_mcd
double d1_mcd(NumericMatrix& eta, NumericMatrix& y, NumericMatrix& res);
RcppExport SEXP _covmodUK_d1_mcd(SEXP etaSEXP, SEXP ySEXP, SEXP resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type res(resSEXP);
    rcpp_result_gen = Rcpp::wrap(d1_mcd(eta, y, res));
    return rcpp_result_gen;
END_RCPP
}
// d2_mcd
double d2_mcd(NumericMatrix& eta, NumericMatrix& y, NumericMatrix& res);
RcppExport SEXP _covmodUK_d2_mcd(SEXP etaSEXP, SEXP ySEXP, SEXP resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type res(resSEXP);
    rcpp_result_gen = Rcpp::wrap(d2_mcd(eta, y, res));
    return rcpp_result_gen;
END_RCPP
}
// jacobian_mcd
double jacobian_mcd(Rcpp::NumericMatrix& eta, Rcpp::NumericMatrix& res, uint32_t& d, uint32_t& S_row, uint32_t& S_col, Rcpp::NumericVector rc_idx_s, Rcpp::NumericVector& rc_idx_t, uint32_t& cor_flag);
RcppExport SEXP _covmodUK_jacobian_mcd(SEXP etaSEXP, SEXP resSEXP, SEXP dSEXP, SEXP S_rowSEXP, SEXP S_colSEXP, SEXP rc_idx_sSEXP, SEXP rc_idx_tSEXP, SEXP cor_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type res(resSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type d(dSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type S_row(S_rowSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type S_col(S_colSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rc_idx_s(rc_idx_sSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type rc_idx_t(rc_idx_tSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type cor_flag(cor_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(jacobian_mcd(eta, res, d, S_row, S_col, rc_idx_s, rc_idx_t, cor_flag));
    return rcpp_result_gen;
END_RCPP
}
// ll_mcd
double ll_mcd(NumericMatrix& eta, NumericMatrix& y);
RcppExport SEXP _covmodUK_ll_mcd(SEXP etaSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(ll_mcd(eta, y));
    return rcpp_result_gen;
END_RCPP
}
// lt_inversion
Rcpp::NumericMatrix lt_inversion(Rcpp::NumericMatrix& X);
RcppExport SEXP _covmodUK_lt_inversion(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(lt_inversion(X));
    return rcpp_result_gen;
END_RCPP
}
// mcd_LD
Rcpp::NumericMatrix mcd_LD(Rcpp::NumericVector& x, uint32_t& d);
RcppExport SEXP _covmodUK_mcd_LD(SEXP xSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(mcd_LD(x, d));
    return rcpp_result_gen;
END_RCPP
}
// mcd_Sigma
Rcpp::NumericMatrix mcd_Sigma(Rcpp::NumericMatrix& L, Rcpp::NumericMatrix& D, uint32_t& d);
RcppExport SEXP _covmodUK_mcd_Sigma(SEXP LSEXP, SEXP DSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type L(LSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type D(DSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(mcd_Sigma(L, D, d));
    return rcpp_result_gen;
END_RCPP
}
// mcd_decomposition
Rcpp::NumericMatrix mcd_decomposition(Rcpp::NumericMatrix& X);
RcppExport SEXP _covmodUK_mcd_decomposition(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(mcd_decomposition(X));
    return rcpp_result_gen;
END_RCPP
}
// precision
Rcpp::NumericMatrix precision(Rcpp::NumericMatrix& X);
RcppExport SEXP _covmodUK_precision(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(precision(X));
    return rcpp_result_gen;
END_RCPP
}
// pred_mcd
double pred_mcd(Rcpp::NumericMatrix& eta, Rcpp::NumericMatrix& res, uint32_t& d, uint32_t& cor_flag);
RcppExport SEXP _covmodUK_pred_mcd(SEXP etaSEXP, SEXP resSEXP, SEXP dSEXP, SEXP cor_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type res(resSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type d(dSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type cor_flag(cor_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(pred_mcd(eta, res, d, cor_flag));
    return rcpp_result_gen;
END_RCPP
}
// res_dev_mcd
double res_dev_mcd(NumericMatrix& eta, NumericMatrix& y, NumericMatrix& res);
RcppExport SEXP _covmodUK_res_dev_mcd(SEXP etaSEXP, SEXP ySEXP, SEXP resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type res(resSEXP);
    rcpp_result_gen = Rcpp::wrap(res_dev_mcd(eta, y, res));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_covmodUK_d1_mcd", (DL_FUNC) &_covmodUK_d1_mcd, 3},
    {"_covmodUK_d2_mcd", (DL_FUNC) &_covmodUK_d2_mcd, 3},
    {"_covmodUK_jacobian_mcd", (DL_FUNC) &_covmodUK_jacobian_mcd, 8},
    {"_covmodUK_ll_mcd", (DL_FUNC) &_covmodUK_ll_mcd, 2},
    {"_covmodUK_lt_inversion", (DL_FUNC) &_covmodUK_lt_inversion, 1},
    {"_covmodUK_mcd_LD", (DL_FUNC) &_covmodUK_mcd_LD, 2},
    {"_covmodUK_mcd_Sigma", (DL_FUNC) &_covmodUK_mcd_Sigma, 3},
    {"_covmodUK_mcd_decomposition", (DL_FUNC) &_covmodUK_mcd_decomposition, 1},
    {"_covmodUK_precision", (DL_FUNC) &_covmodUK_precision, 1},
    {"_covmodUK_pred_mcd", (DL_FUNC) &_covmodUK_pred_mcd, 4},
    {"_covmodUK_res_dev_mcd", (DL_FUNC) &_covmodUK_res_dev_mcd, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_covmodUK(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
