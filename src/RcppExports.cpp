// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// d1_mcd
double d1_mcd(NumericMatrix& eta, NumericMatrix& y, NumericMatrix& res);
RcppExport SEXP _covmodUK_d1_mcd(SEXP etaSEXP, SEXP ySEXP, SEXP resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type res(resSEXP);
    rcpp_result_gen = Rcpp::wrap(d1_mcd(eta, y, res));
    return rcpp_result_gen;
END_RCPP
}
// d1_beta
double d1_beta(arma::mat& X, arma::mat& eta, arma::mat& y, Rcpp::List& jj, uint32_t& K, arma::vec& lb, arma::mat& l1, arma::mat& l1_l, arma::uvec& ig, arma::vec& z, arma::vec& w, arma::mat& Gm);
RcppExport SEXP _covmodUK_d1_beta(SEXP XSEXP, SEXP etaSEXP, SEXP ySEXP, SEXP jjSEXP, SEXP KSEXP, SEXP lbSEXP, SEXP l1SEXP, SEXP l1_lSEXP, SEXP igSEXP, SEXP zSEXP, SEXP wSEXP, SEXP GmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type jj(jjSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type l1_l(l1_lSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type ig(igSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gm(GmSEXP);
    rcpp_result_gen = Rcpp::wrap(d1_beta(X, eta, y, jj, K, lb, l1, l1_l, ig, z, w, Gm));
    return rcpp_result_gen;
END_RCPP
}
// d1_mcd_eta
double d1_mcd_eta(const arma::mat& eta, const arma::mat& y, arma::mat& d1l, arma::vec& z, arma::vec& w, arma::mat& Gm);
RcppExport SEXP _covmodUK_d1_mcd_eta(SEXP etaSEXP, SEXP ySEXP, SEXP d1lSEXP, SEXP zSEXP, SEXP wSEXP, SEXP GmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type d1l(d1lSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gm(GmSEXP);
    rcpp_result_gen = Rcpp::wrap(d1_mcd_eta(eta, y, d1l, z, w, Gm));
    return rcpp_result_gen;
END_RCPP
}
// d2_mcd
double d2_mcd(NumericMatrix& eta, NumericMatrix& y, NumericMatrix& res);
RcppExport SEXP _covmodUK_d2_mcd(SEXP etaSEXP, SEXP ySEXP, SEXP resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type res(resSEXP);
    rcpp_result_gen = Rcpp::wrap(d2_mcd(eta, y, res));
    return rcpp_result_gen;
END_RCPP
}
// d2_beta
double d2_beta(arma::mat& X, arma::mat& eta, arma::mat& y, Rcpp::List& jj, uint32_t& K, arma::mat& lbb, arma::mat& l2, arma::vec& l2_v, arma::mat& l2_l, arma::vec& l2_v_l, arma::uvec& ig, arma::vec& z, arma::vec& w, arma::mat& G, arma::vec& t, Rcpp::List& b1_eta, Rcpp::List& b1, Rcpp::List& b2, Rcpp::List& b3, arma::vec& ib1_eta, arma::vec& ib3, arma::vec& l2_el, arma::vec& l2_el2);
RcppExport SEXP _covmodUK_d2_beta(SEXP XSEXP, SEXP etaSEXP, SEXP ySEXP, SEXP jjSEXP, SEXP KSEXP, SEXP lbbSEXP, SEXP l2SEXP, SEXP l2_vSEXP, SEXP l2_lSEXP, SEXP l2_v_lSEXP, SEXP igSEXP, SEXP zSEXP, SEXP wSEXP, SEXP GSEXP, SEXP tSEXP, SEXP b1_etaSEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP ib1_etaSEXP, SEXP ib3SEXP, SEXP l2_elSEXP, SEXP l2_el2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type jj(jjSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type lbb(lbbSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type l2_v(l2_vSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type l2_l(l2_lSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type l2_v_l(l2_v_lSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type ig(igSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type b1_eta(b1_etaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ib1_eta(ib1_etaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ib3(ib3SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type l2_el(l2_elSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type l2_el2(l2_el2SEXP);
    rcpp_result_gen = Rcpp::wrap(d2_beta(X, eta, y, jj, K, lbb, l2, l2_v, l2_l, l2_v_l, ig, z, w, G, t, b1_eta, b1, b2, b3, ib1_eta, ib3, l2_el, l2_el2));
    return rcpp_result_gen;
END_RCPP
}
// d2_mcd_eta
double d2_mcd_eta(const arma::mat& eta, const arma::mat& y, arma::mat& d2l, arma::vec& d2l_v, arma::vec& z, arma::vec& w, arma::mat& G, arma::vec& t, Rcpp::List& b1_eta, Rcpp::List& b3, arma::vec& ib1_eta, arma::vec& ib3);
RcppExport SEXP _covmodUK_d2_mcd_eta(SEXP etaSEXP, SEXP ySEXP, SEXP d2lSEXP, SEXP d2l_vSEXP, SEXP zSEXP, SEXP wSEXP, SEXP GSEXP, SEXP tSEXP, SEXP b1_etaSEXP, SEXP b3SEXP, SEXP ib1_etaSEXP, SEXP ib3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type d2l(d2lSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type d2l_v(d2l_vSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type b1_eta(b1_etaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ib1_eta(ib1_etaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ib3(ib3SEXP);
    rcpp_result_gen = Rcpp::wrap(d2_mcd_eta(eta, y, d2l, d2l_v, z, w, G, t, b1_eta, b3, ib1_eta, ib3));
    return rcpp_result_gen;
END_RCPP
}
// idx_zwGt
double idx_zwGt(uint32_t d, IntegerVector& z, IntegerVector& w, IntegerMatrix& G, IntegerVector& t);
RcppExport SEXP _covmodUK_idx_zwGt(SEXP dSEXP, SEXP zSEXP, SEXP wSEXP, SEXP GSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint32_t >::type d(dSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(idx_zwGt(d, z, w, G, t));
    return rcpp_result_gen;
END_RCPP
}
// jacobian_mcd
double jacobian_mcd(Rcpp::NumericMatrix& eta, Rcpp::NumericMatrix& res, uint32_t& d, uint32_t& S_row, uint32_t& S_col, Rcpp::NumericVector rc_idx_s, Rcpp::NumericVector& rc_idx_t, uint32_t& cor_flag);
RcppExport SEXP _covmodUK_jacobian_mcd(SEXP etaSEXP, SEXP resSEXP, SEXP dSEXP, SEXP S_rowSEXP, SEXP S_colSEXP, SEXP rc_idx_sSEXP, SEXP rc_idx_tSEXP, SEXP cor_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type res(resSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type d(dSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type S_row(S_rowSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type S_col(S_colSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rc_idx_s(rc_idx_sSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type rc_idx_t(rc_idx_tSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type cor_flag(cor_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(jacobian_mcd(eta, res, d, S_row, S_col, rc_idx_s, rc_idx_t, cor_flag));
    return rcpp_result_gen;
END_RCPP
}
// ll_mcd
double ll_mcd(NumericMatrix& eta, NumericMatrix& y);
RcppExport SEXP _covmodUK_ll_mcd(SEXP etaSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(ll_mcd(eta, y));
    return rcpp_result_gen;
END_RCPP
}
// lt_inversion
Rcpp::NumericMatrix lt_inversion(Rcpp::NumericMatrix& X);
RcppExport SEXP _covmodUK_lt_inversion(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(lt_inversion(X));
    return rcpp_result_gen;
END_RCPP
}
// mcd_LD
Rcpp::NumericMatrix mcd_LD(Rcpp::NumericVector& x, uint32_t& d);
RcppExport SEXP _covmodUK_mcd_LD(SEXP xSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(mcd_LD(x, d));
    return rcpp_result_gen;
END_RCPP
}
// mcd_Sigma
Rcpp::NumericMatrix mcd_Sigma(Rcpp::NumericMatrix& L, Rcpp::NumericMatrix& D, uint32_t& d);
RcppExport SEXP _covmodUK_mcd_Sigma(SEXP LSEXP, SEXP DSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type L(LSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type D(DSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(mcd_Sigma(L, D, d));
    return rcpp_result_gen;
END_RCPP
}
// mcd_decomposition
Rcpp::NumericMatrix mcd_decomposition(Rcpp::NumericMatrix& X);
RcppExport SEXP _covmodUK_mcd_decomposition(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(mcd_decomposition(X));
    return rcpp_result_gen;
END_RCPP
}
// precision
Rcpp::NumericMatrix precision(Rcpp::NumericMatrix& X);
RcppExport SEXP _covmodUK_precision(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(precision(X));
    return rcpp_result_gen;
END_RCPP
}
// pred_mcd
double pred_mcd(Rcpp::NumericMatrix& eta, Rcpp::NumericMatrix& res, uint32_t& d, uint32_t& cor_flag);
RcppExport SEXP _covmodUK_pred_mcd(SEXP etaSEXP, SEXP resSEXP, SEXP dSEXP, SEXP cor_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type res(resSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type d(dSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type cor_flag(cor_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(pred_mcd(eta, res, d, cor_flag));
    return rcpp_result_gen;
END_RCPP
}
// res_dev_mcd
double res_dev_mcd(NumericMatrix& eta, NumericMatrix& y, NumericMatrix& res);
RcppExport SEXP _covmodUK_res_dev_mcd(SEXP etaSEXP, SEXP ySEXP, SEXP resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type res(resSEXP);
    rcpp_result_gen = Rcpp::wrap(res_dev_mcd(eta, y, res));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_covmodUK_d1_mcd", (DL_FUNC) &_covmodUK_d1_mcd, 3},
    {"_covmodUK_d1_beta", (DL_FUNC) &_covmodUK_d1_beta, 12},
    {"_covmodUK_d1_mcd_eta", (DL_FUNC) &_covmodUK_d1_mcd_eta, 6},
    {"_covmodUK_d2_mcd", (DL_FUNC) &_covmodUK_d2_mcd, 3},
    {"_covmodUK_d2_beta", (DL_FUNC) &_covmodUK_d2_beta, 23},
    {"_covmodUK_d2_mcd_eta", (DL_FUNC) &_covmodUK_d2_mcd_eta, 12},
    {"_covmodUK_idx_zwGt", (DL_FUNC) &_covmodUK_idx_zwGt, 5},
    {"_covmodUK_jacobian_mcd", (DL_FUNC) &_covmodUK_jacobian_mcd, 8},
    {"_covmodUK_ll_mcd", (DL_FUNC) &_covmodUK_ll_mcd, 2},
    {"_covmodUK_lt_inversion", (DL_FUNC) &_covmodUK_lt_inversion, 1},
    {"_covmodUK_mcd_LD", (DL_FUNC) &_covmodUK_mcd_LD, 2},
    {"_covmodUK_mcd_Sigma", (DL_FUNC) &_covmodUK_mcd_Sigma, 3},
    {"_covmodUK_mcd_decomposition", (DL_FUNC) &_covmodUK_mcd_decomposition, 1},
    {"_covmodUK_precision", (DL_FUNC) &_covmodUK_precision, 1},
    {"_covmodUK_pred_mcd", (DL_FUNC) &_covmodUK_pred_mcd, 4},
    {"_covmodUK_res_dev_mcd", (DL_FUNC) &_covmodUK_res_dev_mcd, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_covmodUK(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
